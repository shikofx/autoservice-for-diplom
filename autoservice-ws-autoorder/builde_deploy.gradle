import com.bmuschko.gradle.cargo.convention.Deployable
import com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote
import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote
//task deployAppA(type: CargoRedeployRemote) {
//        description = "Deploys WAR to Tomcat ."
//        // description of task
//        hostname = '127.0.0.1' // ip of the tomcat
//        port = 8061 // port at which tomcat is running
//        username = "tomcat" // username of tomcat
//        password = "0986123"  // password of the tomcat
//        cargo {
//            deployable {
//                file = file("${nativeAppName}")
//                context = 'appA'
//            }
//        }
//}
//
//cargo {
//    containerId = 'tomcat9x'
//    port = 8060
//    deployable {
//        file = file("${nativeAppName}")
//        context = 'web-services'
//    }
//
//    local {
//        homeDir = file("${tomcatHome}")
//    }
//}

//class RemoteContainer {
//    String name
//    String hostname
//    Integer port
//    String username
//    String password
//}
//
//def remoteContainers = [new RemoteContainer(name: 'tomcat_0614', hostname: 'epbyminw0614.minsk.epam.com',
//                                            port: 8061, username: 'tomcat', password: '0986123'),
////                        new RemoteContainer(name: 'tomcat_6849', hostname: 'epbyminw0614.minsk.epam.com',
////                                            port: 8061, username: 'deployer', password: 'qwerty')
//]
//
//remoteContainers.each { config ->
//    task "deployRemote${config.name.capitalize()}"(type: CargoDeployRemote) {
//        description = "Deploys WAR to remote Tomcat '${config.name}'."
//        containerId = 'tomcat9x'
//        println(config.hostname)
//        hostname = config.hostname
//        println(config.port)
//        port = config.port
//        username = config.username
//        password = config.password
//    }
//}
//
//
//
//task deployToAllRemoteTomcats {
//    dependsOn remoteContainers.collect { "deployRemote${it.name.capitalize()}" }
//    description = 'Deploys to all remote Tomcat containers.'
//    group = 'deployment'
//}

//def tomcatHome = System.getenv()['CATALINA_HOME']
//def appName = 'autoorderApi'
//
//task deployApp(dependsOn: build) {
//    println "Deleting ${tomcatHome}/webapps/${appName}"
//    delete "${tomcatHome}/webapps/${appName}"
//    println "Deleting ${tomcatHome}/work/Catalina/localhost/${appName}"
//    delete "${tomcatHome}/work/Catalina/localhost/${appName}"
//    def nativeAppName = ("${war.baseName}"+'-'+"${war.version}"+".war")
//    println "Copying ${nativeAppName} as ${appName}.war to ${tomcatHome}/webapps"
//    copy {
//        from war.archivePath
//        into "${tomcatHome}/webapps"
//        include("${nativeAppName}")
//        rename("${nativeAppName}","${appName}.war"
//        )
//    }
//}
//

plugins {
    id 'java'
    id 'war'
    id 'net.nemerosa.versioning' version '2.5.1'
    id 'eclipse'
    id 'eclipse-wtp'
    id 'com.bmuschko.cargo' version '2.2.3'
    id 'com.bmuschko.cargo-base' version '2.2.3'
}

eclipse {
    project {
        name = 'WebApi Service Platform'
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }
    classpath {
        downloadSources = true
        downloadJavadoc = true
    }
    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    wtp {
        facet {
            //you can add some extra wtp facets; mandatory keys: 'name', 'version':
            facet name: 'java', version: '1.8'
            facet name: 'jst.web', version: '3.1'
        }
    }
}

webAppDirName = 'WebContent'

group = 'com.living'
version = versioning.info.display

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://repository.jboss.org/nexus/content/groups/public-jboss' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases' }
    maven { url 'http://repo.gradle.org/gradle/libs-releases-local' }
}

dependencies {
    //project dependecnies

    cargo 'org.wildfly:wildfly-controller-client:8.2.0.Final'
    cargo 'org.codehaus.cargo:cargo-core-uberjar:1.6.2'
    cargo 'org.glassfish.deployment:deployment-client:3.1.1'
    cargo 'org.codehaus.cargo:cargo-ant:1.6.2'
}

war {
    webInf { from 'src/main/resources/WEB-INF' }
    manifest {
        attributes 'Implementation-Version': versioning.info.display
    }
}

task createQAWar(type: War, dependsOn: classes) {
    archiveName "webapi-demo-${versioning.info.display}.war"
    destinationDir = file("$buildDir/dist")
    webInf {
        from('scopes') {
            include 'demo.persistence.xml'
            rename('demo.persistence.xml', 'persistence.xml')
            into('classes/META-INF/')
        }
        from('scopes') {
            include 'configuration.demo.properties'
            rename('configuration.demo.properties', 'scope.properties')
            into('classes/')
        }
    }
}

task createDevelopmentWar(type: War, dependsOn: classes) {
    archiveName "webapi-dev-${versioning.info.display}.war"
    destinationDir = file("$buildDir/dist")
    webInf {
        from('scopes') {
            include 'development.persistence.xml'
            rename('development.persistence.xml', 'persistence.xml')
            into('classes/META-INF/')
        }
        from('scopes') {
            include 'configuration.development.properties'
            rename('configuration.development.properties', 'scope.properties')
            into('classes/')
        }
    }
}

task createTestingWar(type: War, dependsOn: classes) {
    archiveName "webapi-test-${versioning.info.display}.war"
    destinationDir = file("$buildDir/dist")
    webInf {
        from('scopes') {
            include 'testing.persistence.xml'
            rename('testing.persistence.xml', 'persistence.xml')
            into('classes/META-INF/')
        }
        from('scopes') {
            include 'configuration.testing.properties'
            rename('configuration.testing.properties', 'scope.properties')
            into('classes/')
        }
    }
}

task createProductionWar(type: War, dependsOn: classes) {
    archiveName "webapi-prod-${versioning.info.display}.war"
    destinationDir = file("$buildDir/dist")
    webInf {
        from('scopes') {
            include 'production.persistence.xml'
            rename('production.persistence.xml', 'persistence.xml')
            into('classes/META-INF/')
        }
        from('scopes') {
            include 'configuration.production.properties'
            rename('configuration.production.properties', 'scope.properties')
            into('classes/')
        }
    }
}

task createDists(dependsOn: [createQAWar, createDevelopmentWar, createTestingWar, createProductionWar])

class RemoteContainer {
    String name
    String container
    String hostname
    Integer port
    String username
    String password
    String purpose
}

def remoteContainers = [new RemoteContainer(
        name: 'wildfly10',
        container: 'wildfly10x',
        hostname: 'localhost',
        port: 2200,
        username: 'living',
        password: 'L5ngDgtl00?',
        purpose: 'development'
)
]

remoteContainers.each { config ->
    task "deployDev${config.name.capitalize()}"(type: com.bmuschko.gradle.cargo.tasks.remote.CargoDeployRemote) {
        description = "Deploys WAR to remote Web Application Server: '${config.name}'."
        containerId = config.container
        hostname = config.hostname
        port = config.port
        username = config.username
        password = config.password
        context = "webapi"
        dependsOn = [createDevelopmentWar]
    }

    task "undeployDev${config.name.capitalize()}"(type: com.bmuschko.gradle.cargo.tasks.remote.CargoUndeployRemote) {
        description = "Deploys WAR to remote Web Application Server: '${config.name}'."
        containerId = config.container
        hostname = config.hostname
        port = config.port
        username = config.username
        password = config.password
    }
}

sourceSets.all {
    output.resourcesDir = output.classesDir
}